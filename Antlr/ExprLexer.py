# Generated from Expr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,19,141,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
        8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,3,12,87,8,12,1,13,1,13,5,13,91,8,13,10,13,12,13,94,9,13,
        1,14,4,14,97,8,14,11,14,12,14,98,1,15,4,15,102,8,15,11,15,12,15,
        103,1,15,1,15,5,15,108,8,15,10,15,12,15,111,9,15,1,16,1,16,1,16,
        1,16,5,16,117,8,16,10,16,12,16,120,9,16,1,16,1,16,1,17,4,17,125,
        8,17,11,17,12,17,126,1,17,1,17,1,18,1,18,1,18,1,18,5,18,135,8,18,
        10,18,12,18,138,9,18,1,18,1,18,0,0,19,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,1,0,6,2,0,65,90,97,122,3,0,48,57,65,90,97,122,1,0,48,57,4,
        0,10,10,13,13,34,34,92,92,3,0,9,10,13,13,32,32,2,0,10,10,13,13,149,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,1,39,1,0,0,0,3,41,
        1,0,0,0,5,43,1,0,0,0,7,45,1,0,0,0,9,47,1,0,0,0,11,49,1,0,0,0,13,
        51,1,0,0,0,15,53,1,0,0,0,17,55,1,0,0,0,19,59,1,0,0,0,21,65,1,0,0,
        0,23,70,1,0,0,0,25,86,1,0,0,0,27,88,1,0,0,0,29,96,1,0,0,0,31,101,
        1,0,0,0,33,112,1,0,0,0,35,124,1,0,0,0,37,130,1,0,0,0,39,40,5,59,
        0,0,40,2,1,0,0,0,41,42,5,61,0,0,42,4,1,0,0,0,43,44,5,42,0,0,44,6,
        1,0,0,0,45,46,5,47,0,0,46,8,1,0,0,0,47,48,5,43,0,0,48,10,1,0,0,0,
        49,50,5,45,0,0,50,12,1,0,0,0,51,52,5,40,0,0,52,14,1,0,0,0,53,54,
        5,41,0,0,54,16,1,0,0,0,55,56,5,105,0,0,56,57,5,110,0,0,57,58,5,116,
        0,0,58,18,1,0,0,0,59,60,5,102,0,0,60,61,5,108,0,0,61,62,5,111,0,
        0,62,63,5,97,0,0,63,64,5,116,0,0,64,20,1,0,0,0,65,66,5,98,0,0,66,
        67,5,111,0,0,67,68,5,111,0,0,68,69,5,108,0,0,69,22,1,0,0,0,70,71,
        5,115,0,0,71,72,5,116,0,0,72,73,5,114,0,0,73,74,5,105,0,0,74,75,
        5,110,0,0,75,76,5,103,0,0,76,24,1,0,0,0,77,78,5,116,0,0,78,79,5,
        114,0,0,79,80,5,117,0,0,80,87,5,101,0,0,81,82,5,102,0,0,82,83,5,
        97,0,0,83,84,5,108,0,0,84,85,5,115,0,0,85,87,5,101,0,0,86,77,1,0,
        0,0,86,81,1,0,0,0,87,26,1,0,0,0,88,92,7,0,0,0,89,91,7,1,0,0,90,89,
        1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,28,1,0,0,0,
        94,92,1,0,0,0,95,97,7,2,0,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,
        0,0,0,98,99,1,0,0,0,99,30,1,0,0,0,100,102,7,2,0,0,101,100,1,0,0,
        0,102,103,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,104,105,1,0,0,
        0,105,109,5,46,0,0,106,108,7,2,0,0,107,106,1,0,0,0,108,111,1,0,0,
        0,109,107,1,0,0,0,109,110,1,0,0,0,110,32,1,0,0,0,111,109,1,0,0,0,
        112,118,5,34,0,0,113,117,8,3,0,0,114,115,5,92,0,0,115,117,9,0,0,
        0,116,113,1,0,0,0,116,114,1,0,0,0,117,120,1,0,0,0,118,116,1,0,0,
        0,118,119,1,0,0,0,119,121,1,0,0,0,120,118,1,0,0,0,121,122,5,34,0,
        0,122,34,1,0,0,0,123,125,7,4,0,0,124,123,1,0,0,0,125,126,1,0,0,0,
        126,124,1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,128,129,6,17,0,0,
        129,36,1,0,0,0,130,131,5,47,0,0,131,132,5,47,0,0,132,136,1,0,0,0,
        133,135,8,5,0,0,134,133,1,0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,
        136,137,1,0,0,0,137,139,1,0,0,0,138,136,1,0,0,0,139,140,6,18,0,0,
        140,38,1,0,0,0,10,0,86,92,98,103,109,116,118,126,136,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    INT_TYPE = 9
    FLOAT_TYPE = 10
    BOOL_TYPE = 11
    STRING_TYPE = 12
    BOOL = 13
    ID = 14
    INT = 15
    FLOAT = 16
    STRING = 17
    WS = 18
    COMMENT = 19

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'='", "'*'", "'/'", "'+'", "'-'", "'('", "')'", "'int'", 
            "'float'", "'bool'", "'string'" ]

    symbolicNames = [ "<INVALID>",
            "INT_TYPE", "FLOAT_TYPE", "BOOL_TYPE", "STRING_TYPE", "BOOL", 
            "ID", "INT", "FLOAT", "STRING", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "INT_TYPE", "FLOAT_TYPE", "BOOL_TYPE", "STRING_TYPE", 
                  "BOOL", "ID", "INT", "FLOAT", "STRING", "WS", "COMMENT" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


