# Generated from Expr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,230,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
        11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,
        14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
        16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,
        22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,
        27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
        29,3,29,176,8,29,1,30,1,30,5,30,180,8,30,10,30,12,30,183,9,30,1,
        31,4,31,186,8,31,11,31,12,31,187,1,32,4,32,191,8,32,11,32,12,32,
        192,1,32,1,32,5,32,197,8,32,10,32,12,32,200,9,32,1,33,1,33,1,33,
        1,33,5,33,206,8,33,10,33,12,33,209,9,33,1,33,1,33,1,34,4,34,214,
        8,34,11,34,12,34,215,1,34,1,34,1,35,1,35,1,35,1,35,5,35,224,8,35,
        10,35,12,35,227,9,35,1,35,1,35,0,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,1,0,6,2,0,65,90,97,122,
        3,0,48,57,65,90,97,122,1,0,48,57,4,0,10,10,13,13,34,34,92,92,3,0,
        9,10,13,13,32,32,2,0,10,10,13,13,238,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
        0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,75,1,
        0,0,0,5,77,1,0,0,0,7,79,1,0,0,0,9,81,1,0,0,0,11,83,1,0,0,0,13,85,
        1,0,0,0,15,87,1,0,0,0,17,89,1,0,0,0,19,91,1,0,0,0,21,93,1,0,0,0,
        23,95,1,0,0,0,25,98,1,0,0,0,27,103,1,0,0,0,29,109,1,0,0,0,31,114,
        1,0,0,0,33,120,1,0,0,0,35,124,1,0,0,0,37,130,1,0,0,0,39,135,1,0,
        0,0,41,142,1,0,0,0,43,145,1,0,0,0,45,148,1,0,0,0,47,150,1,0,0,0,
        49,153,1,0,0,0,51,156,1,0,0,0,53,158,1,0,0,0,55,160,1,0,0,0,57,163,
        1,0,0,0,59,175,1,0,0,0,61,177,1,0,0,0,63,185,1,0,0,0,65,190,1,0,
        0,0,67,201,1,0,0,0,69,213,1,0,0,0,71,219,1,0,0,0,73,74,5,59,0,0,
        74,2,1,0,0,0,75,76,5,61,0,0,76,4,1,0,0,0,77,78,5,44,0,0,78,6,1,0,
        0,0,79,80,5,123,0,0,80,8,1,0,0,0,81,82,5,125,0,0,82,10,1,0,0,0,83,
        84,5,40,0,0,84,12,1,0,0,0,85,86,5,41,0,0,86,14,1,0,0,0,87,88,5,42,
        0,0,88,16,1,0,0,0,89,90,5,47,0,0,90,18,1,0,0,0,91,92,5,43,0,0,92,
        20,1,0,0,0,93,94,5,45,0,0,94,22,1,0,0,0,95,96,5,105,0,0,96,97,5,
        102,0,0,97,24,1,0,0,0,98,99,5,101,0,0,99,100,5,108,0,0,100,101,5,
        115,0,0,101,102,5,101,0,0,102,26,1,0,0,0,103,104,5,119,0,0,104,105,
        5,104,0,0,105,106,5,105,0,0,106,107,5,108,0,0,107,108,5,101,0,0,
        108,28,1,0,0,0,109,110,5,114,0,0,110,111,5,101,0,0,111,112,5,97,
        0,0,112,113,5,100,0,0,113,30,1,0,0,0,114,115,5,119,0,0,115,116,5,
        114,0,0,116,117,5,105,0,0,117,118,5,116,0,0,118,119,5,101,0,0,119,
        32,1,0,0,0,120,121,5,105,0,0,121,122,5,110,0,0,122,123,5,116,0,0,
        123,34,1,0,0,0,124,125,5,102,0,0,125,126,5,108,0,0,126,127,5,111,
        0,0,127,128,5,97,0,0,128,129,5,116,0,0,129,36,1,0,0,0,130,131,5,
        98,0,0,131,132,5,111,0,0,132,133,5,111,0,0,133,134,5,108,0,0,134,
        38,1,0,0,0,135,136,5,115,0,0,136,137,5,116,0,0,137,138,5,114,0,0,
        138,139,5,105,0,0,139,140,5,110,0,0,140,141,5,103,0,0,141,40,1,0,
        0,0,142,143,5,38,0,0,143,144,5,38,0,0,144,42,1,0,0,0,145,146,5,124,
        0,0,146,147,5,124,0,0,147,44,1,0,0,0,148,149,5,33,0,0,149,46,1,0,
        0,0,150,151,5,61,0,0,151,152,5,61,0,0,152,48,1,0,0,0,153,154,5,33,
        0,0,154,155,5,61,0,0,155,50,1,0,0,0,156,157,5,60,0,0,157,52,1,0,
        0,0,158,159,5,62,0,0,159,54,1,0,0,0,160,161,5,60,0,0,161,162,5,61,
        0,0,162,56,1,0,0,0,163,164,5,62,0,0,164,165,5,61,0,0,165,58,1,0,
        0,0,166,167,5,116,0,0,167,168,5,114,0,0,168,169,5,117,0,0,169,176,
        5,101,0,0,170,171,5,102,0,0,171,172,5,97,0,0,172,173,5,108,0,0,173,
        174,5,115,0,0,174,176,5,101,0,0,175,166,1,0,0,0,175,170,1,0,0,0,
        176,60,1,0,0,0,177,181,7,0,0,0,178,180,7,1,0,0,179,178,1,0,0,0,180,
        183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,62,1,0,0,0,183,181,
        1,0,0,0,184,186,7,2,0,0,185,184,1,0,0,0,186,187,1,0,0,0,187,185,
        1,0,0,0,187,188,1,0,0,0,188,64,1,0,0,0,189,191,7,2,0,0,190,189,1,
        0,0,0,191,192,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,194,1,
        0,0,0,194,198,5,46,0,0,195,197,7,2,0,0,196,195,1,0,0,0,197,200,1,
        0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,66,1,0,0,0,200,198,1,0,
        0,0,201,207,5,34,0,0,202,206,8,3,0,0,203,204,5,92,0,0,204,206,9,
        0,0,0,205,202,1,0,0,0,205,203,1,0,0,0,206,209,1,0,0,0,207,205,1,
        0,0,0,207,208,1,0,0,0,208,210,1,0,0,0,209,207,1,0,0,0,210,211,5,
        34,0,0,211,68,1,0,0,0,212,214,7,4,0,0,213,212,1,0,0,0,214,215,1,
        0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,217,1,0,0,0,217,218,6,
        34,0,0,218,70,1,0,0,0,219,220,5,47,0,0,220,221,5,47,0,0,221,225,
        1,0,0,0,222,224,8,5,0,0,223,222,1,0,0,0,224,227,1,0,0,0,225,223,
        1,0,0,0,225,226,1,0,0,0,226,228,1,0,0,0,227,225,1,0,0,0,228,229,
        6,35,0,0,229,72,1,0,0,0,10,0,175,181,187,192,198,205,207,215,225,
        1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    IF = 12
    ELSE = 13
    WHILE = 14
    READ = 15
    WRITE = 16
    INT_TYPE = 17
    FLOAT_TYPE = 18
    BOOL_TYPE = 19
    STRING_TYPE = 20
    AND = 21
    OR = 22
    NOT = 23
    EQ = 24
    NEQ = 25
    LT = 26
    GT = 27
    LE = 28
    GE = 29
    BOOL = 30
    ID = 31
    INT = 32
    FLOAT = 33
    STRING = 34
    WS = 35
    COMMENT = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'='", "','", "'{'", "'}'", "'('", "')'", "'*'", "'/'", 
            "'+'", "'-'", "'if'", "'else'", "'while'", "'read'", "'write'", 
            "'int'", "'float'", "'bool'", "'string'", "'&&'", "'||'", "'!'", 
            "'=='", "'!='", "'<'", "'>'", "'<='", "'>='" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "WHILE", "READ", "WRITE", "INT_TYPE", "FLOAT_TYPE", 
            "BOOL_TYPE", "STRING_TYPE", "AND", "OR", "NOT", "EQ", "NEQ", 
            "LT", "GT", "LE", "GE", "BOOL", "ID", "INT", "FLOAT", "STRING", 
            "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "IF", "ELSE", "WHILE", 
                  "READ", "WRITE", "INT_TYPE", "FLOAT_TYPE", "BOOL_TYPE", 
                  "STRING_TYPE", "AND", "OR", "NOT", "EQ", "NEQ", "LT", 
                  "GT", "LE", "GE", "BOOL", "ID", "INT", "FLOAT", "STRING", 
                  "WS", "COMMENT" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


